name: Docker CI/CD

on:
  push:
    branches:
      - main
      - canary
      # TODO: REMOVE ME
      - ci-cd
    pull_request:

env:
  REPO_NAME: api

jobs:
  lint:
    name: Linting code
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Check code format
        run: |
          npm install eslint
          npm run lint

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm run test:cov

  end-to-end-tests:
    name: End to End test (e2e)
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Set up database container
        run: |
          npx prisma migrate deploy

      - name: Run end to end tests
        run: npm run test:e2e

    services:
      db:
        image: postgres:14

        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: sith4-api-test

  build-final-image:
    name: Building production image
    runs-on: ubuntu-latest
    needs: [unit-tests, end-to-end-tests]

    permissions:
      packages: write # needed to push docker image to ghcr.io
      pull-requests: write # needed to create and update comments in PRs

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Applying metadata to image
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY_ROOT }} # ghcr.io/ae-utbm/api
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest-main,enable=${{ endsWith(github.ref, 'main')}}
            type=raw,value=latest-dev,enable=${{ endsWith(github.ref, 'canary')}}
            type=raw,value={{sha}}-main,enable=${{ endsWith(github.ref, 'main')}}
            type=raw,value={{sha}}-dev,enable=${{ endsWith(github.ref, 'canary')}}

      - name: Building final image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request'}}
          tags: ${{ steps.docker_meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

        # If PR, put image tags in the PR comments
        # from https://github.com/marketplace/actions/create-or-update-comment
      - name: Find comment for image tags
        uses: peter-evans/find-comment@v1
        if: github.event_name == 'pull_request'
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Docker image tag(s) pushed

        # If PR, put image tags in the PR comments
      - name: Create or update comment for image tags
        uses: peter-evans/create-or-update-comment@v2
        if: github.event_name == 'pull_request'
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Docker image tag(s) pushed:
            ```text
            ${{ steps.docker_meta.outputs.tags }}
            ```
          edit-mode: replace
